To change & connect database

mysql> select database();
+------------+
| database() |
+------------+
| NULL       |
+------------+
1 row in set (0.00 sec)

mysql> use mydb0
Database changed
mysql> select database();
+------------+
| database() |
+------------+
| mydb0      |
+------------+
1 row in set (0.00 sec)

mysql>


CREATE TABLE EMP
       (EMPNO Integer Primary Key,
        ENAME Varchar(15),
        JOB Varchar(9),
        MGR Integer,
        HIREDATE Date,
        SAL Integer,
        COMM Integer,
        DEPTNO Integer);
INSERT INTO EMP VALUES
        (7369, 'SMITH',  'CLERK',     7902, '1980-12-17',
        800, NULL, 20);
INSERT INTO EMP VALUES
        (7499, 'ALLEN',  'SALESMAN',  7698,
        '1981-05-20',1600,  300, 30);
INSERT INTO EMP VALUES
        (7521, 'WARD',   'SALESMAN',  7698,
        '1981-05-22', 1250,  500, 30);
INSERT INTO EMP VALUES
        (7566, 'JONES',  'MANAGER',   7839,
        '1981-04-02',  2975, NULL, 20);
INSERT INTO EMP VALUES
        (7654, 'MARTIN', 'SALESMAN',  7698,
        '1981-09-20', 1250, 1400, 30);
INSERT INTO EMP VALUES
        (7698, 'BLAKE',  'MANAGER',   7839,
        '1981-05-01',  2850, NULL, 30);
INSERT INTO EMP VALUES
        (7782, 'CLARK',  'MANAGER',   7839,
        '1981-06-8',  2450, NULL, 10);
INSERT INTO EMP VALUES
        (7788, 'SCOTT',  'ANALYST',   7566,
        '1982-12-09', 3000, NULL, 20);
INSERT INTO EMP VALUES
        (7839, 'KING',   'PRESIDENT', NULL,
        '1981-11-17', 5000, NULL, 10);
INSERT INTO EMP VALUES
        (7844, 'TURNER', 'SALESMAN',  7698,
        '1981-08-09',  1500,    0, 30);
INSERT INTO EMP VALUES
        (7876, 'ADAMS',  'CLERK',     7788,
        '1983-12-01', 1100, NULL, 20);
INSERT INTO EMP VALUES
        (7900, 'JAMES',  'CLERK',     7698,
        '1981-12-03',   950, NULL, 30);
INSERT INTO EMP VALUES
        (7902, 'FORD',   'ANALYST',   7566,
        '1981-03-06',  3000, NULL, 20);
INSERT INTO EMP VALUES
        (7934, 'MILLER', 'CLERK',     7782,
        '1982-01-23', 1300, NULL, 10);


CREATE TABLE DEPT
       (DEPTNO INTEGER Primary Key,
        DNAME VARCHAR(14),
        LOC VARCHAR(13) );

INSERT INTO DEPT VALUES
        (10,'ACCOUNTING','NEW YORK');
INSERT INTO DEPT VALUES (20,'RESEARCH','DALLAS');
INSERT INTO DEPT VALUES
        (30,'SALES','CHICAGO');
INSERT INTO DEPT VALUES
        (40,'OPERATIONS','BOSTON');


create table PCodes
(Code Varchar(20),
 Qty Int);

 Insert Into PCodes
 Values('A01', 10);
 Insert Into PCodes
 Values('AB01', 20);
 Insert Into PCodes
 Values('ABC01',30);
 Insert Into PCodes
 Values('ABCD01',25);
 Insert Into PCodes
 Values('P01',35);
 Insert Into PCodes
 Values('PQ04',27);
 Insert Into PCodes
 Values('PQR01',29);
 Insert Into PCodes
 Values('01',28);
 Insert Into PCodes
 Values('A%C01',31);
 Insert Into PCodes
 Values('A%D01',32);
 Insert Into PCodes
 Values('AB_01',33);

create table e
(empno Integer,
ename varchar(10),
deptno Integer);

create table d
(deptno Integer,
dname varchar(10),
pcode varchar(5));

create  table p
(pcode varchar(5),	
pname varchar(10));

-- Insert records in e
insert into e
values(1,'A',10);
insert into e
values(2,'B',20);
insert into e
values(3,'C',30);
insert into e
values(4,'D',20);

-- Insert records in d
insert into d
values(10,'Prod','P1');
insert into d
values(20,'Maint','P2');
insert into d
values(30,'Insp','P1');
 
-- Insert records in p
insert into p
values('P1','Nuts');
insert into p
values('P2','Bolts');
insert into p	
values('P3','Gears');

create table rates
(scheme char(2),
 roi float);

create table period
(code char(5),
 month float);

insert into rates
values('s1',5);
insert into rates
values('s2',5.5);
insert into rates
values('s3',6);
insert into rates
values('s4',6.5);
insert into rates
values('s5',7);
insert into rates
values('s6',7.5);
insert into rates
values('s7',8);

insert into period
values('c1',1);
insert into period
values('c2',2);
insert into period
values('c3',3);
insert into period
values('c4',4);
insert into period
values('c5',5);
insert into period
values('c6',6);
insert into period
values('c7',7);
insert into period
values('c8',8);
insert into period
values('c9',9);
insert into period
values('c10',10);
insert into period
values('c11',11);
insert into period
values('c12',12);

create table emp1
(empno varchar(5),
ename varchar(15),
deptno Integer);

create table dept1
(deptno Integer,
dname varchar(20));


insert into emp1
values('E1','Smith',10);
insert into emp1
values('E2','Roger',20);
insert into emp1
values('E3','Martin',10);
insert into emp1
values('E4','Kim',30);
insert into emp1
values('E5','Glen',77);
insert into emp1
values('E6','Richards',80);


insert into dept1
values(10,'Accounts');
insert into dept1
values(20,'Production');
insert into dept1
values(30,'Marketing');
insert into dept1
values(40,'Inspection');
insert into dept1
values(50,'R&D');

-- Set Operators on multiple tables

create table mech
(rollno integer,
 marks integer);

create table comp
(rollno integer,
marks integer);

insert into mech values (101,90);
insert into mech values (102,56);
insert into mech values (103,78);
insert into mech values (104,35);
insert into mech values (105,100);
insert into mech values (106,56);

insert into comp values(201,78);
insert into comp values(202,88);
insert into comp values(203,43);
insert into comp values(204,56);
insert into comp values(205,59);

create table India
(TrID Varchar(20),
 Pname Varchar(40),
 Qty Integer,
 Amount Integer);

create table Australia
(TrID Varchar(20),
 Pname Varchar(40),
 Qty Integer,
 Amount Integer);

-- -----------------


Insert into India Values('Ind_101_C1','Washing Machine',1,20000);
Insert into India Values('Ind_102_C3','LCD',1,25000);
Insert into India Values('Ind_103_C2','LCD',1,20000);
Insert into India Values('Ind_104_C2','LCD',1,19000);
Insert into India Values('Ind_105_C1','Refrigerator',1,19000);
Insert into India Values('Ind_106_C1','Refrigerator',1,20000);
Insert into India Values('Ind_107_C3','Washing Machine',1,20000);
Insert into India Values('Ind_108_C4','Washing Machine',1,25000);
Insert into India Values('Ind_109_C1','Refrigerator',1,10000);
Insert into India Values('Ind_110_C2','LCD',1,25000);
Insert into India Values('Ind_111_C2','Washing Machine',1,19000);
Insert into India Values('Ind_112_C3','LCD',1,20000);
Insert into India Values('Ind_113_C4','LCD',1,20000);
Insert into India Values('Ind_114_C3','Washing Machine',1,25000);
Insert into India Values('Ind_115_C1','Washing Machine',1,19000);
Insert into India Values('Ind_116_C1','Refrigerator',1,10000);
Insert into India Values('Ind_117_C3','Chairs',4,20000);
Insert into India Values('Ind_118_C2','Chairs',6,30000);
Insert into India Values('Ind_119_C1','LCD',2,20000);
Insert into India Values('Ind_120_C2','Washing Machine',1,25000);

Insert into Australia Values('Aus_101_C1','LCD',1,25000);
Insert into Australia Values('Aus_102_C1','Dinning Table',1,25000);
Insert into Australia Values('Aus_103_C2','Dinning Table',1,10000);
Insert into Australia Values('Aus_104_C3','Sofa',1,10000);
Insert into Australia Values('Aus_105_C3','Washing Machine',12,60000);
Insert into Australia Values('Aus_106_C4','LCD',1,20000);
Insert into Australia Values('Aus_107_C2','LCD',1,25000);
Insert into Australia Values('Aus_108_C4','LCD',2,50000);
Insert into Australia Values('Aus_109_C1','Sofa',1,25000);
Insert into Australia Values('Aus_110_C2','Sofa',2,10000);
Insert into Australia Values('Aus_111_C3','Sofa',10,50000);
Insert into Australia Values('Aus_112_C3','Washing Machine',5,25000);
Insert into Australia Values('Aus_113_C4','LCD',1,20000);
Insert into Australia Values('Aus_114_C1','LCD',1,25000);
Insert into Australia Values('Aus_115_C2','LCD',1,25000);
Insert into Australia Values('Aus_116_C3','LCD',1,25000);
Insert into Australia Values('Aus_117_C4','LCD',1,25000);
Insert into Australia Values('Aus_118_C1','LCD',1,25000);
Insert into Australia Values('Aus_119_C4','Sofa',1,25000);
Insert into Australia Values('Aus_120_C2','Sofa',2,10000);
Insert into Australia Values('Aus_121_C3','Refrigerator',4,20000);
Insert into Australia Values('Aus_122_C1','Sofa',1,19000);
Insert into Australia Values('Aus_123_C3','Refrigerator',20,100000);
Insert into Australia Values('Aus_124_C2','Refrigerator',1,19000);


select *
from emp
where job = 'Clerk' and deptno=20 and sal<1000;

select *
from emp
where ( job = 'Clerk' and sal<1000);

select *
from emp
where sal >=1250 and sal <= 3000;

Between ...and
-- It treats like OR operator
select *
from emp
where sal between 1250 and 3000;

select *
from emp
where ename between 'adams' and 'smith';

select *
from emp
where sal not between 1250 and 3000;

select *
from emp
where job = 'clerk' or job= 'manager';

select *
from emp
where job In ('clerk', 'manager');

select *
from emp
where job not In ('clerk', 'manager');

select *
from emp
where job not In ('clerk', 'manager',null);
-- It consider all queries as And operator 
thats why you done get output

select *
from emp
where sal not in (1250,9999);

//Null adn not null
select *
from emp
where comm is not null;


select *
from emp
where comm is null;

select * from test_nulls;

select * from test_nulls where string is null;

select * from test_nulls where string is not null;



//To match strings
select *
from emp
where ename like '%NE%';

select * from pcodes where code like "A?%%" Escape '?';

show 'A%..then anything.

select * from pcodes where code like "A?%%" Escape '?';


select ename , sal as Salary from emp;


select ename , sal Salary from emp; -- as is not a mandatory keyword.

select ename Name_of_Emplopyee, sal Salary
from emp;

select ename 'Name of Emplopyee', sal Salary
from emp;

select ename sal from emp;
-------------------------------------------------------
ORDER BY
useful for sorting i.e. rearranging the seuence of rows ascending or descending 
columns.

select * from emp order by ename desc;

insert into emp (empno, ename) Values(1,'smith');
 delete from emp where empno =1;

 select * from emp order by sal desc;

select * from emp order by Hiredate;

select * from emp order by comm desc;

MULTIPLE COLUMN SORTING
--------------------------------------------------

select ename,deptno,sal
from emp
order by deptno,sal desc;

select ename,deptno,sal
from emp
order by sal desc, deptno;


select *
from emp
order by empno, sal desc;-- empno is pk


select *
from emp
where deptno=20
order by sal desc;

COLUMN ALIAS NUMBER CAN BE GIVEN IN ORDER BY--

select ename , sal , deptno from emp order by 2;

select ename , sal , deptno from emp order by 1; -- orders by column 3



CREATING TABLES
-----------------------------------

Create Table Cust_MasterO
( CustID Int,
CustName Varchar(20),
CustCity Varchar(10)
);

-- Insering records in the table

Insert into Cust_MasterO Values(1,'John', 'Pune');
Insert into Cust_MasterO (CustId, CustName, CustCity) Values (2, 'Martin', 'Mumbai');
Insert into Cust_MasterO(CustName) Values ('Roger'); --if the remaining 
colums are not primary or uniques keys

Creating table wioth Data Integrity Rules (constraints)
a) Column level
b) Table level

Create Table Cust_Master
( CustID Int Primary Key,
CustName Varchar(20) Not Null,
CustCity Varchar(10) default 'Pune',
Deposit Int Check(Deposit >= 500),
Credit_Card_No Int Unique
);

Create Table Cust_Transactions
(CustID Int References Cust_Master,
Amount Int
);

Insert into Cust_Transaction Values(1,200);
-- although my sql accepts other databases throw error

Insert into Cust_Master Values (1,'john',default,400,null); -- 
Insert into Cust_Master Values (1,'john',default,600,null);
Insert into Cust_Master Values (1,'Martin',default,600,null);

Table Level Constraints::
------------------------------------
Create table t1
(a int,
b int not null,
c int,
d int,
Primary Key(a),
Unique (c),
Check (d >400)
);

Need of Table Level Constraints
1) When we are comparing columns of the tables 
2) While creating composite keys

create table t1
(a int,
b int,
c int check(c>b)
);  -- Error

create table t1
(a int,
b int,
c int, check(c>b)
);

2) Eg. while creating composite keys:

create table t2
(a int,
b int,
c int,
Primary Key(a,b)
);

3) Foreign key at table level:
Create table Cust_Transaction_Intl
( CustID Int,
Amount Int,
Foreign Key(CustID) References Cust_Master(CustID)
);


Deleting records
-----------------------------------
Delete
From Emp
Where Empno=7698;

select * from emp;

Update Emp
Set sal = 7000 
-- This will update all the salaries of everyone.

Update Emp
Set sal = 7000
Where Ename="KING";

drop table emp;

select 6+7; -- prints sum

select 6+7 from emp; -- 13 is printed multiple times

select 6+7 from emp where deptno =20;

types of sql functions as per their criterion
1) built in either ANSI or  Prpprietory
2 ) user defined (Programatically in that database)

Types of Built in funtctions i















select concat('Salary of ', ename, ' is ', sal) as "Salary Details" from emp;
select concat('Job of ', ename, ' is ', job) as "Job Details" from emp;
select concat('abc', 'hshd');

It returns the first nit null value from the parameter list.
select ename, sal, sal +coalesce(comm,0) as "total" from emp;

Coalesce is ANSI SQL functions .
It returns the first nit null value from the parameter list.
select ename, sal, sal +coalesce(comm,0) as "total" from emp;

Condition 







select ename, deptno, case deptno 
When 10 Then 'A'
When 20 Then 'B'
Else 'C'
End as "Department Code"
from emp;


select ename, deptno, case deptno 
When 10 Then 'A'
When 20 Then 'B'
-- Else
-- 'C'
End as "Department Code"
from emp;

Select Ename,sal,case
when sal >= 4000 then 'A+'
when sal >= 2990 then 'A'
when sal >= 2400 then 'B+'
when sal >= 1800 then 'B'
Else
'C'
End as "salary Class"
from emp;

select sum(sal) from emp;


mysql> select sum(ename) from emp;
+------------+
| sum(ename) |
+------------+
|          0 |
+------------+

mysql> select sum(hiredate) from emp;
+---------------+
| sum(hiredate) |
+---------------+
|     277380658 |
+---------------+
1 row in set (0.00 sec)

mysql> select max(hiredate) from emp;
+---------------+
| max(hiredate) |
+---------------+
| 1983-12-01    |
+---------------+
1 row in set (0.02 sec)

mysql> select min(hiredate) from emp;
+---------------+
| min(hiredate) |
+---------------+
| 1980-12-17    |
+---------------+
1 row in set (0.00 sec)

mysql> select max(ename) from emp;
+------------+
| max(ename) |
+------------+
| ward       |
+------------+
1 row in set (0.00 sec)

mysql> select min(ename) from emp;
+------------+
| min(ename) |
+------------+
| ADAMS      |
+------------+
1 row in set (0.00 sec)

mysql> select count(comm) from emp;
+-------------+
| count(comm) |
+-------------+
|           4 |
+-------------+
1 row in set (0.01 sec)

mysql> select deptno, Sum(sal)as "total" from emp group by deptno;
+--------+-------+
| deptno | total |
+--------+-------+
|     20 | 10875 |
|     30 |  9400 |
|     10 |  8750 |
+--------+-------+
3 rows in set (0.00 sec)

mysql> select job from emp group by job;
+-----------+
| job       |
+-----------+
| CLERK     |
| SALESMAN  |
| MANAGER   |
| ANALYST   |
| PRESIDENT |
+-----------+
5 rows in set (0.00 sec)

mysql> select job, deptno, sum(sal) as "Total" from emp group by job, deptno;
+-----------+--------+-------+
| job       | deptno | Total |
+-----------+--------+-------+
| CLERK     |     20 |  1900 |
| SALESMAN  |     30 |  5600 |
| MANAGER   |     20 |  2975 |
| MANAGER   |     30 |  2850 |
| MANAGER   |     10 |  2450 |
| ANALYST   |     20 |  6000 |
| PRESIDENT |     10 |  5000 |
| CLERK     |     30 |   950 |
| CLERK     |     10 |  1300 |
+-----------+--------+-------+
9 rows in set (0.00 sec)


mysql> select comm
    -> from emp
    -> group by comm;
+------+
| comm |
+------+
| NULL |
|  300 |
|  500 |
| 1400 |
|    0 |
+------+
5 rows in set (0.00 sec)


mysql> select count(*) fromagr1;
+----------+
| fromagr1 |
+----------+
|        1 |
+----------+
1 row in set (0.00 sec)


mysql> select sum(a), avg(a),max(a), min(a), count(A)
    -> from agr1;
+--------+--------+--------+--------+----------+
| sum(a) | avg(a) | max(a) | min(a) | count(A) |
+--------+--------+--------+--------+----------+
|   NULL |   NULL |   NULL |   NULL |        0 |
+--------+--------+--------+--------+----------+
1 row in set (0.00 sec)

mysql> select avg(sal)
    -> from emp
    -> group by deptno;
+-----------+
| avg(sal)  |
+-----------+
| 2175.0000 |
| 1566.6667 |
| 2916.6667 |
+-----------+
3 rows in set (0.00 sec)\

mysql> select max (avg(sal))
    -> from emp
    -> group by deptno;
ERROR 1630 (42000): FUNCTION mydb0.max does not exist. Check the 'Function Name Parsing and Resolution' section in the Reference Manual


mysql> select job, max(sal)
    -> from emp
    -> where job <> 'president'
    -> group by job
    -> having max(sal)>2000;
+---------+----------+
| job     | max(sal) |
+---------+----------+
| MANAGER |     2975 |
| ANALYST |     3000 |
+---------+----------+
2 rows in set (0.00 sec)

select ename, dname
from emp,dept
where emp.deptmno=dept.deptno;


select ename, dname
from emp inner join dept
on emp.deptmno=dept.deptno;


select ename, dname
from emp inner join dept; -- gives the cross product 56 rows

select ename, dname, deptno
from emp join dept
On emp.deptno=dept.deptno; -- error


select ename, dname, emp.deptno
from emp join dept
On emp.deptno=dept.deptno;

The best practice-------------------------Table Aliases

select emp.ename, dept.dname, emp.deptno
from emp join dept
On emp.deptno=dept.deptno;


select e.ename, d.dname, e.deptno
from emp e join dept d
On e.deptno=d.deptno;

Join Condition and Filter Condition together

select ename, dname, sal
from emp join dept
On emp.deptno=dept.deptno -- On and In For joins acts like And here.
where sal>2000;


select ename, dname, sal
from emp join dept
On emp.deptno=dept.deptno Or sal>2000;-- partial cross join

From emp e join salgrade sg
On e.sal between sg.losal and sg.hisal;

Examples of Non equi joins


select e.ename, e.sal
from emp join dept
On emp.deptno=dept.deptno Or sal>2000;

select * from e;
select * from d;
select * from p;

More than 2 tables joins

select ename, dname, pname
from e join d
on e.deptno = d.deptno
join p
on d.pcode=p.code;






Outer joins:
Outer join is the extention of inner join.
There are 3 types of outer joins:

Left Oj
right OJ
full OJ

Left Oj means matching records from tboth the tables all records of left table

select ename , dname
from emp1 left outer join dept1
on emp1.deptno=dept1.deptno;


select ename , dname
from dept1 right outer join emp1
on emp1.deptno=dept1.deptno;

Full OJ= inner + Remaining of left table + remaining of Right table

select ename , dname
from emp1 Full outer join dept1
on emp1.deptno=dept1.deptno; -- Not supported in my sql

left or Right jopins can also be used to show " only non matching 


select ename as  "ENames Not in dept 1"
from emp1 left outer join dept1
on emp1.deptno=dept1.deptno
where dept1.deptno is null;

Select e.ename as "sub ordinate", IfNull(e.ename, "No Manager") as "Manager"
from emp e left join emp m
on e.mgr = m.empno;


Sub Queries
There aere2 types of sSQ
1. Non Corelated

2. Corelated

non cprelatd
dislay the records of employee who earn sal > smiths sal;

select * 
from emp 
where sal> (select sal 
		from emp 
		where ename = 'smith');
---------------------if more than 1 smith is there then problem------------therefpre use primamary key only
if no asmith is there ten we get empty set---------------------

First Hint to use SQ--- When there is a derrived ot indirect value in the where clause or having 
clause for comparison then that we can get that derived ir indirect calue using the dub query 
tchnique------------


Eg 2..-----------------------------------
Display name and slaary of the highrst earner.

select ename ,sal 
from emp 
where sal=(select max(sal ) 
		from emp);
-----------------here it is better because it return only o1 answer--------------------

Second Hint------------------
Whenever we want to compare aggregate value directly without 
grouping in the where clause use sub query
Tyes of mnon corelated sub 	ueries
1. Single row sub Q
2.Multirow SQ
3. Along with exiast and non exist operator 
4. Nested SQ


1. Single row sub Q

When the child query return 1 value to its parent then it is cateforised as single row SQ.
Look eg 2 is better than 1.

2.Multirow SQ
When the child query return more than 1 value to its parent then it is cateforised as Multirow SQ

 select * 
from emp 
where sal > ( select sal 
		from emp 
		where deptno=20); -- Compile time error multiple rows returned by subquery

We can use ANY and ALL and IN for multi row queries: ---here like----------------------------------

select * 
from emp 
where sal > ANY( select sal 
		from emp 
		where deptno=20);--<ANY= ( less than the max from the list)
				> ANY = ( greater than the minimum because it is or operation..
			if > any of it .....it is considered

select * 
from emp 
where sal > ALL( select sal 
		from emp 
		where deptno=20);----- > ALL( must be greaotr than all
					< All ( must be less than all of them)

Display records from emp1 who have deptno matching as per dept1 table.

Instead of joins we can use SQ techniques---------------------


select * 
from emp1
where deptno in (select deptno
		from dept1);

Display records from emp1 who fo not have deptno matching as per dept1 table.

select * 
from emp1
where deptno not in (select deptno
			from dept1);

-------------------If SQ gets a NULL all the codotion getsa false WE get empty set
therefore use is not null to be sager side--
select * 
from emp1
where deptno not in (select deptno
		from dept1 
		where deptno is not null);
----------------------

using non Corelated SQ in DML Statements.
Means the parent qiery need not to be only select qiery.
The parent query can be insett or update or delete.

create table empc1 
as
select * 
from emp;


create table empc2
as
select * 
from emp;


create table empc3
as
select * 
from emp;


create table empc4
as
select * 
from emp;

Delete records Haaving highest salary------------Child query can alwqays be se;ect---parent could be any

delete from empc1 
where sal=(select max(sal) 
		from empc1);----- MYSQL exception, in all other SQL databases it works smoothly
delete from empc1 
where sal=(select max(sal) 
		from emp);--- now works fine in mySQl as the child table is different


Change the salary of the lowest earner , The raise swhould ne 50%.

update empc2 
set sal = sal + (sal*0.5)
where sal=(select min(sal 
		from empc2);--MYSQL exception, in all other SQL databases it works smoothly

update empc2 
set sal = (sal + (sal*0.5))
where sal=(select min(sal) 
		from emp);---now works fine in mySQl as the child table is different

3) Along with Exist and Not exist operators:
1. Exist
If the exists operator gets false from SQ then the parent query will not get executed
If the exists operator gets true from SQ then the parent query will get executed

It is used to decide eithr to execute parent query or NOT.-----------


select * 
from emp
where exists ( select * 
		from dept
		where deptno=98);-- as exist only reads 
-----------------true or false-- if false then parent does not execute..else execute


select * 
from emp
where exists ( select * 
		from dept
		where deptno>20);--- since true ---parent query gets executed

The SQ is NOT returning any actual to the partent for comparision
But the SQ only returns either True Or False to its {arent via Exists Operator.

So the colums list of chiuld query is of Sero significance

select * 
from emp
where exists ( select 'CDAC' 
		from dept
		where deptno=20);

select * 
from emp
where exists ( select NULL 
		from dept
		where deptno=20);---This is the fastest because no value
		 is being returned and also no value is asked to return

select * 
from emp
where exists (select dayname(curdate())= 'SUNDAY'); -----true T.F. all rows returned( not correct syntax)

Records are shown if current day is SUNDAY else not shown-------
select * 
from emp
where exists (select null 
		from emp 
		where dayname(curdate())= 'SUNDAY');---Records are shown if today is SUNDAY else not shown

Records should not be shown if current day is SaturDAY
select * 
from emp
where exists (select null
		from emp 
		where dayname(curdate())= 'SATURDAY');

select * 
from emp
where exists (select dayname(curdate())= 'SATURDAY');
	
NOT EXIST-------------
select * 
from emp
where not exists (select null
		from emp 
		where dayname(curdate())= 'SATURDAY');

it executes when the child query is false-----


3. NESTED SUBQUERIES-----------inside a SQ there will be another SQ
Display records who have salary greatie than fords jobs highest salary

select *
From emp
Where sal>(select max(sal)
		from emp
		where (job=(select job
			from emp
			where ename ='FORD'
			))
		);

--------------------------------------------------------------------------------------------------------

SET OPERATORS

They will enable us to combine the rows given by 2 or more 
select statements and finally ONE output is given

1. UNION ALL:
it wil combine the rows of 2 select statements and display all the records
It will not eliminate duplicates
It will not do ant sorting.

select * 
from India
Union ALL 
select * 
From Australia;


select pname 
from India
Union ALL 
select pname 
From Australia;


2. UNION:
it wil combine the rows of 2 select statements and display all the records
It will eliminate duplicates
It will sort ascending as per first column by default: --(but not in mysql)


select pname 
from India
Union ALL 
select pname 
From Australia;

Rules of successful execution of set operations:
1) no of colums of each select stattement MUST BE SAME.


select pname, qty
from INDIA
Union
select pname
From australia;--Error

select pname, qty
from INDIA
Union
select pname, null
From australia;-- Work Around

2) Positional columns should be compatible data type wise.

select pname, qty
from INDIA
Union
select Qty,pname
From australia;---pname and qty are revesed -- Wrong output in MYSQL(type casting) .
		Others all SQL databases will thorow erros

3) Order by clause if present then should be present after the ;ast select statement


select pname, qty
from INDIA
Order by pname
Union
select pname,qty
From australia; ---- ERROR


select pname, qty
from INDIA
Union
select pname,qty
From australia
Order by pname;--- 
------------------------------------------------------------------------
3) INTERSECT: 
It wil combine the rows of 2 select statements and display all the records
**** It will consider only common rows form those 2 select statements
It will eliminate duplicates
It will sort ascending as per first column by default: --(but not in mysql)

Display the different types of products sold in common in india and australia

Select pname
From INDIA
Intersect
Select pname
From Australia;

--------------------------------------------------------------------------
4) EXCEPT.----MINUS(Oracle only)
It wil combine the rows of 2 select statements and display all the records
**** It will consider rows of first se;ect statement which are not in the second select statement
It will eliminate duplicates
It will sort ascending as per first column by default: --(but not in mysql)


Display the different types id producrs sold in india but not in australia

Select pname
From INDIA
Except
Select pname
From Australia;

Changing the statements changes the output:-------------------------------

Select pname
From Australia
Except
Select pname
From India;

 select * 
from mech 
where marks >=70 
Union all 
select * 
from comp 
where marks >=70;

------------------------ As per rule only the first alias is slected only
Select pname as "A"
From INDIA
Union
Select pname as "B"
From Australia;

-------------------here also the second alias is ignored ----Table is shown only with pname.
Select pname 
From INDIA
Union
Select pname as "B"
From Australia;

There is no limit on how many select statements we have to combine with the SET OPERATORs
UNION INTersection etc...
